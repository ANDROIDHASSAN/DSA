Today i have learned :- variable scope , operator precedence

problem 1 : (191 - leetcode (Number of 1 Bits)

Write a function that takes the binary representation of a positive integer and returns the number of 
set bits
 it has (also known as the Hamming weight).

 

Example 1:

Input: n = 11

Output: 3

Explanation:

The input binary string 1011 has a total of three set bits.

Example 2:

Input: n = 128

Output: 1

Explanation:

The input binary string 10000000 has a total of one set bit.

Example 3:

Input: n = 2147483645

Output: 30

Explanation:

The input binary string 1111111111111111111111111111101 has a total of thirty set bits.

 

Constraints:

1 <= n <= 231 - 1
 
Follow up: If this function is called many times, how would you optimize it?

answer :-

class Solution {
public:
    int hammingWeight(int n) {
        int count = 0;
        while(n!=0)
        {
            if(n&1)
            {
                count++;
            }
            n = n>>1;
        }
        return count;
    }
};



Problem 2:

1281. Subtract the Product and Sum of Digits of an Integer
Solved
Easy
Topics
Companies
Hint
Given an integer number n, return the difference between the product of its digits and the sum of its digits.
 

Example 1:

Input: n = 234
Output: 15 
Explanation: 
Product of digits = 2 * 3 * 4 = 24 
Sum of digits = 2 + 3 + 4 = 9 
Result = 24 - 9 = 15
Example 2:

Input: n = 4421
Output: 21
Explanation: 
Product of digits = 4 * 4 * 2 * 1 = 32 
Sum of digits = 4 + 4 + 2 + 1 = 11 
Result = 32 - 11 = 21
 

Constraints:

1 <= n <= 10^5
Seen this question in a real interview before?
1/5
Yes
No
Accepted
521.3K
Submissions
601.9K
Acceptance Rate
86.6%


Answer :-

class Solution {
public:
    int subtractProductAndSum(int n) {
        {
          int prod = 1;
          int sum = 0;
          while(n!=0)
          {
            int digit = n%10;
            prod = prod*digit;
            sum = sum+digit;
            n = n/10;

          }
          int answer = prod-sum;
          return answer;
        }
    }
};
